---
description: 
globs: 
alwaysApply: true
---
# Project Structure

## Main Structure

- We use Turborepo with bun as the package manager (instead of pnpm or npm)
- Main app is in `pstv_web/src`
- Server actions are in `pstv_web/src/actions` folder

## Package Management

- **bun** is the required package manager for all workspace operations.
- Install dependencies with:
  ```sh
  bun install
  ```
- Run scripts with:
  ```sh
  bun run <script>
  ```
- Do not use `pnpm`, `npm`, or `yarn` for dependency management in this project.
- If you add or update dependencies, always commit the updated `bun.lock` file.

```tree
.
├── root
│   ├── .cursor/               # cursor related such rules / features doc
│   ├── asset/                 # 
│   ├── bin/                   # cli / shell scripts 
│   ├── doc/                   # documentation 
│   ├── pstv_web/              # Main Next.js application
│   │   ├── public/            # Static assets (images, fonts)
│   │   ├── prisma/            # Prisma schema and client
│   │   ├── src/               # Next.js App Router
│   │   │   ├── actions/       # server actions
│   │   │   ├── app/           # Next.js App Router
│   │   │   │   ├── (auth)     # contain user authenicated content such as My Account
│   │   │   │   ├── (root)     # Marketing/landing pages and other public accessible pages
│   │   │   │   ├── (store)    # store homepage by storeId.
│   │   │   │   ├── admin      # admin home (required admin priv.)
│   │   │   │   ├── api/       # API Routes
│   │   │   ├── components/    # UI components
│   │   │   ├── hooks/         # Custom React hooks
│   │   │   ├── lib/           # helper functions and libraries
│   │   │   │   ├── epg/       # EPG processing library
│   │   │   │   │   ├── constants.ts    # Parser constants
│   │   │   │   │   ├── client.ts       # Client-safe exports
│   │   │   │   │   ├── processing-engine.ts # Main engine
│   │   │   │   │   ├── parsers/        # Parser implementations
│   │   │   │   │   └── test-runner.ts  # Test system
│   │   │   │   └── prisma-client-*     # Database clients
│   │   │   ├── providers/     # React Context providers
│   │   │   ├── types/         # TypeScript type definitions
│   │   │   ├── utils/         # Utility functions and helpers
│   │   │   ├── auth.ts        # next-auth configuration
│   │   ├── next.config.mjs
│   │   ├── package.json
│   │   └── ... (config files)
│   └── README.md              # 
```

## File Naming and Organization

- Use kebab case for route directories (e.g., `api/hello-world/route`)
- Use PascalCase for components (e.g. `components/Button.tsx`)
- Shadcn components are in `components/ui`
- All other components are in `components/`
- Colocate files in the folder where they're used unless they can be used across the app
- If a component can be used in many places, place it in the `components` folder

## New Pages

- Create new pages at: `pstv_web/src/app/(root)/PAGE_NAME/page.tsx`
- Components for the page are either in `page.tsx` or in the `pstv_web/src/app/(root)/PAGE_NAME/components` folder
- Pages are Server components for direct data loading
- Use `swr` for data fetching in deeply nested components
- Components with `onClick` must be client components with `use client` directive
- Server action files must start with `use server`

## Utility Functions

- Create utility functions in `utils/` folder for reusable logic
- Use lodash utilities for common operations (arrays, objects, strings)
- Import specific lodash functions to minimize bundle size:
  ```ts
  import groupBy from "lodash/groupBy";
  ```
